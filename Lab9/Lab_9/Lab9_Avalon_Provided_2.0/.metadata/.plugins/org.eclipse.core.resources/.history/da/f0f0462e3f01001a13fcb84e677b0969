/************************************************************************
Lab 9 Nios Software

Dong Kai Wang, Fall 2017
Christine Chen, Fall 2013

For use with ECE 385 Experiment 9
University of Illinois ECE Department
************************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <time.h>
#include "aes.h"
#include "system.h"

// Pointer to base address of AES module, make sure it matches Qsys
volatile unsigned int * AES_PTR = (unsigned int *) 0x00000100;

// Execution mode: 0 for testing, 1 for benchmarking
int run_mode = 0;

// void printchar(unsigned char* c, int l, int b) {
// 	int i;
// 	for (i = 0; i < l; i++) {
// 		printf("%2.2x ", c[i]);
// 		if (i % b == b - 1) {
// 			printf("\n");
// 		}
// 	}
// }
// void printint(unsigned int* c, int l, int b) {
// 	int i;
// 	for (i = 0; i < l; i++) {
// 		printf("%8.8x ", c[i]);
// 		if (i % b == b - 1) {
// 			printf("\n");
// 		}
// 	}
// }

/** charToHex
 *  Convert a single character to the 4-bit value it represents.
 *  
 *  Input: a character c (e.g. 'A')
 *  Output: converted 4-bit value (e.g. 0xA)
 */
char charToHex(char c)
{
	char hex = c;

	if (hex >= '0' && hex <= '9')
		hex -= '0';
	else if (hex >= 'A' && hex <= 'F')
	{
		hex -= 'A';
		hex += 10;
	}
	else if (hex >= 'a' && hex <= 'f')
	{
		hex -= 'a';
		hex += 10;
	}
	return hex;
}

/** charsToHex
 *  Convert two characters to byte value it represents.
 *  Inputs must be 0-9, A-F, or a-f.
 *  
 *  Input: two characters c1 and c2 (e.g. 'A' and '7')
 *  Output: converted byte value (e.g. 0xA7)
 */
char charsToHex(char c1, char c2)
{
	char hex1 = charToHex(c1);
	char hex2 = charToHex(c2);
	return (hex1 << 4) + hex2;
}

void addRoundKey(unsigned char* state, unsigned int* key) {
	int i;
	for (i = 0; i < 4; i++) {
		state[i]    = state[i]    ^ ((key[i]>>24)&0x000000FF);
		state[i+4]  = state[i+4]  ^ ((key[i]>>16)&0x000000FF);
		state[i+8]  = state[i+8]  ^ ((key[i]>>8)&0x000000FF);
		state[i+12] = state[i+12] ^ ((key[i])&0x000000FF);
	}
}

int subWord(unsigned int word) {
	return aes_sbox[(word>>24)&0x000000FF]<<24 | aes_sbox[(word>>16)&0x000000FF]<<16 | aes_sbox[(word>>8)&0x000000FF]<<8 | aes_sbox[word&0x000000FF];
}

void subBytes(unsigned char* bytes) {
	int i;
	for (i = 0; i < 16; i++) {
		bytes[i] = aes_sbox[bytes[i]];
	}

}

int rotWord(unsigned int word) {
	return word >> 24 | word << 8;
}

void shiftRows(unsigned char* state) {
	int temp;
	temp = state[4];
	state[4] = state[5];
	state[5] = state[6];
	state[6] = state[7];
	state[7] = temp;
	temp = state[8];
	state[8] = state[10];
	state[10] = temp;
	temp = state[9];
	state[9] = state[11];
	state[11] = temp;
	temp = state[15];
	state[15] = state[14];
	state[14] = state[13];
	state[13] = state[12];
	state[12] = temp;
}

void mixColumns(unsigned char* state) {
	unsigned char temp[4];
	int i, j;
	for (i = 0; i < 4; i++) {
		for (j = 0; j < 4; j++)
			temp[j] = state[4*j+i];
		state[i]    = gf_mul[temp[0]][0] ^ gf_mul[temp[1]][1] ^ temp[2] ^ temp[3];
		state[i+4]  = temp[0] ^ gf_mul[temp[1]][0] ^ gf_mul[temp[2]][1] ^ temp[3];
		state[i+8]  = temp[0] ^ temp[1] ^ gf_mul[temp[2]][0] ^ gf_mul[temp[3]][1];
		state[i+12] = gf_mul[temp[0]][1] ^ temp[1] ^ temp[2] ^ gf_mul[temp[3]][0];
	}
}

void keyExpansion(unsigned char* key, unsigned int* word) {
	unsigned int temp;
	int i;
	for (i = 0; i < 4; i++) {
		word[i] = key[4*i]<<24 | key[4*i+1]<<16 | key[4*i+2]<<8 | key[4*i+3];
	}
	for (i = 4; i < 44; i++) {
		temp = word[i - 1];
		if (i % 4 == 0) {
			temp = subWord(rotWord(temp)) ^ Rcon[i/4];
		}
		word[i] = word[i - 4] ^ temp;
	}

}

/** encrypt
 *  Perform AES encryption in software.
 *
 *  Input: msg_ascii - Pointer to 32x 8-bit char array that contains the input message in ASCII format
 *         key_ascii - Pointer to 32x 8-bit char array that contains the input key in ASCII format
 *  Output:  msg_enc - Pointer to 4x 32-bit int array that contains the encrypted message
 *               key - Pointer to 4x 32-bit int array that contains the input key
 */
void encrypt(unsigned char * msg_ascii, unsigned char * key_ascii, unsigned int * msg_enc, unsigned int * key)
{
	// Implement this function
	unsigned char state[16];
	unsigned char keyy[16];
	int i;
	unsigned int keys[44];
	for (i = 0; i < 16; i++) {
		// state[i] = charsToHex(msg_ascii[2*i], msg_ascii[2*i+1]);
		keyy[i] = charsToHex(key_ascii[2*i], key_ascii[2*i+1]);
	}
	// state needs to be stored column major
	for (i = 0; i < 4; i++) {
		state[i] = charsToHex(msg_ascii[8*i], msg_ascii[8*i+1]);
		state[i+4] = charsToHex(msg_ascii[8*i+2], msg_ascii[8*i+3]);
		state[i+8] = charsToHex(msg_ascii[8*i+4], msg_ascii[8*i+5]);
		state[i+12] = charsToHex(msg_ascii[8*i+6], msg_ascii[8*i+7]);
	}
	keyExpansion(keyy, keys);
	addRoundKey(state, &(keys[0]));
	for (i = 1; i < 10; i++) {
		subBytes(state);
		shiftRows(state);
		mixColumns(state);
		addRoundKey(state, &(keys[4*i]));
	}
	subBytes(state);
	shiftRows(state);
	addRoundKey(state, &(keys[4*i]));

	for (i = 0; i < 4; i++) {
		msg_enc[i] = (state[i]<<24) | (state[i+4])<<16 | (state[i+8])<<8 | state[i+12];
		key[i] = (keyy[4*i]<<24) | (keyy[4*i+1])<<16 | (keyy[4*i+2])<<8 | keyy[4*i+3];
//		WEEK 1
//		AES_PTR[i] = key[i];
//		AES_PTR[i+4] = msg_enc[i];
	}


}



/** decrypt
 *  Perform AES decryption in hardware.
 *
 *  Input:  msg_enc - Pointer to 4x 32-bit int array that contains the encrypted message
 *              key - Pointer to 4x 32-bit int array that contains the input key
 *  Output: msg_dec - Pointer to 4x 32-bit int array that contains the decrypted message
 */
void decrypt(unsigned int * msg_enc, unsigned int * msg_dec, unsigned int * key)
{
	// Implement this function
	int i;
	for (i = 0; i < 4; i++) {
		AES_PTR[i] = key[i];
		AES_PTR[i+4] = msg_enc[i];
	}
	AES_PTR[14] |= 0x00000001;
	while (!(AES_PTR[15]&0x00000001));
	for (i = 0; i < 4; i++) {
		msg_dec[i] = AES_PTR[i+8];
	}
	AES_PTR[14] &= ~0x00000001;
}

/** main
 *  Allows the user to enter the message, key, and select execution mode
 *
 */
int main()
{
	// Input Message and Key as 32x 8-bit ASCII Characters ([33] is for NULL terminator)
	unsigned char msg_ascii[33];
	unsigned char key_ascii[33];
	// Key, Encrypted Message, and Decrypted Message in 4x 32-bit Format to facilitate Read/Write to Hardware
	unsigned int key[4];
	unsigned int msg_enc[4];
	unsigned int msg_dec[4];

	printf("Select execution mode: 0 for testing, 1 for benchmarking: ");
	scanf("%d", &run_mode);

	if (run_mode == 0) {
		// Continuously Perform Encryption and Decryption
		while (1) {
			int i = 0;
			printf("\nEnter Message:\n");
			scanf("%s", msg_ascii);
			printf("\n");
			printf("\nEnter Key:\n");
			scanf("%s", key_ascii);
			printf("\n");
			encrypt(msg_ascii, key_ascii, msg_enc, key);
			printf("\nEncrpted message is: \n");
			for(i = 0; i < 4; i++){
				printf("%08x", msg_enc[i]);
			}
			printf("\n");
			decrypt(msg_enc, msg_dec, key);
			printf("\nDecrypted message is: \n");
			for(i = 0; i < 4; i++){
				printf("%08x", msg_dec[i]);
			}
			printf("\n");
		}
	}
	else {
		// Run the Benchmark
		int i = 0;
		int size_KB = 2;
		// Choose a random Plaintext and Key
		for (i = 0; i < 32; i++) {
			msg_ascii[i] = 'a';
			key_ascii[i] = 'b';
		}
		// Run Encryption
		clock_t begin = clock();
		for (i = 0; i < size_KB * 64; i++)
			encrypt(msg_ascii, key_ascii, msg_enc, key);
		clock_t end = clock();
		double time_spent = (double)(end - begin) / CLOCKS_PER_SEC;
		printf("%f seconds\n", time_spent);
		double speed = size_KB / time_spent;
		printf("Software Encryption Speed: %f KB/s \n", speed);
		// Run Decryption
		begin = clock();
		for (i = 0; i < size_KB * 64; i++)
			decrypt(msg_enc, msg_dec, key);
		end = clock();
		time_spent = (double)(end - begin) / CLOCKS_PER_SEC;
		printf("%f seconds\n", time_spent);
		speed = size_KB / time_spent;
		printf("Hardware Encryption Speed: %f KB/s \n", speed);
	}
	return 0;
}
